import pandas as pd
import pytest

from src.reports import spending_by_category
from tests.conftest import save_xlsx


def test_spending_by_category_datenow(freezer, save_xlsx):
    """ Тестирование работы функции, если дата не была задана """
    data = pd.DataFrame(
        [
            {"Дата операции": "10.11.2024 23:23:23", "Категория": "Фастфуд"},
            {"Дата операции": "09.09.2024 11:11:11", "Категория": "Перевод"},
            {"Дата операции": "09.09.2024 09:11:11", "Категория": "Фастфуд"}
        ]
    )
    freezer.move_to("11.11.2024")

    file = save_xlsx(data)

    result = spending_by_category(file, "Фастфуд")

    assert result == [
        {"Дата операции": "10.11.2024 23:23:23", "Категория": "Фастфуд"},
        {"Дата операции": "09.09.2024 09:11:11", "Категория": "Фастфуд"}
    ]


def test_spending_by_category_user_date(freezer, save_xlsx):
    """ Тестирование функции с заданной датой """
    data = pd.DataFrame(
        [
            {"Дата операции": "10.11.2024 23:23:23", "Категория": "Фастфуд"},
            {"Дата операции": "09.09.2024 11:11:11", "Категория": "Перевод"},
            {"Дата операции": "09.09.2024 09:11:11", "Категория": "Фастфуд"},
            {"Дата операции": "08.09.2024 11:11:11", "Категория": "Перевод"},
            {"Дата операции": "07.09.2024 09:11:11", "Категория": "Фастфуд"},
            {"Дата операции": "10.06.2024 09:11:11", "Категория": "Фастфуд"}
        ]
    )
    freezer.move_to("11.11.2024")

    file = save_xlsx(data)

    result = spending_by_category(file, "Фастфуд", "08.09.2024")

    assert result == [
        {"Дата операции": "07.09.2024 09:11:11", "Категория": "Фастфуд"},
        {"Дата операции": "10.06.2024 09:11:11", "Категория": "Фастфуд"}
    ]


def test_spending_by_category_no_category(freezer, save_xlsx):
    """ Тестирование функции если категории нет в операциях в DF """
    data = pd.DataFrame(
        [
            {"Дата операции": "10.11.2024 23:23:23", "Категория": "Фастфуд"},
            {"Дата операции": "09.09.2024 11:11:11", "Категория": "Перевод"},
            {"Дата операции": "09.09.2024 09:11:11", "Категория": "Фастфуд"},
            {"Дата операции": "08.09.2024 11:11:11", "Категория": "Перевод"},
            {"Дата операции": "07.09.2024 09:11:11", "Категория": "Фастфуд"},
            {"Дата операции": "10.06.2024 09:11:11", "Категория": "Фастфуд"}
        ]
    )
    freezer.move_to("11.11.2024")

    file = save_xlsx(data)

    result = spending_by_category(file, "Супермаркет")

    assert result == []



def test_spending_by_category_not_category():
    """ Тестирование ошибки, если файл не найден """
    with pytest.raises(FileNotFoundError, match="Файл не найден"):
        spending_by_category("operations.xlsx", "Супермаркет", "08.09.2024")


def test_spending_by_category_incorrect_content(save_xlsx):
    """ Тестирование ошибки, при передаче файла с некорректным форматом содержимого """
    data = pd.DataFrame([{"Имя": "Иван"},{"Имя": "Алиса"}])
    file = save_xlsx(data)
    with pytest.raises(ValueError, match="Не верный формат данных"):
        spending_by_category(file, "Супермаркет", "08.09.2024")

